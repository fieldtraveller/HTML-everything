/*	
	Color description
    #ff0000 (HEX value)
    rgb(255,0,0) (RGB value)
    rgba(255,0,0,1) (RGBA value)(A-Alpha)
    red (a color name)
    hsl  (hue, saturation, lightness)
    hsla (hue, saturation, lightness, alpha)

    opacity attribute (0-1)
*/
/*
	background 	A shorthand property for setting all the background properties in one declaration

	background-color 		Sets the background color of an element

	background-clip 	Specifies the painting area of the background							
					    border-box - (default) the background is painted to the outside edge of the border
					    padding-box - the background is painted to the outside edge of the padding
					    content-box - the background is painted within the content box

	background-origin 	Specifies where the background image(s) is/are positioned						
					    border-box - the background image starts from the upper left corner of the border
					    padding-box - (default) the background image starts from the upper left corner of the padding edge
					    content-box - the background image starts from the upper left corner of the content

	background-size 	Specifies the size of the background image(s)(cover,contain,px)

	background-image 		Sets the background image for an element
	background-repeat 		Sets how a background image will be repeated
	background-attachment 	Sets whether a background image is fixed or scrolls with the rest of the page
	background-position 	Sets the starting position of a background image
	
*/
/*
	color 			Sets the color of text
	direction 		Specifies the text direction/writing direction
	letter-spacing 	Increases or decreases the space between characters in a text
	line-height 	Sets the line height
	text-align 		Specifies the horizontal alignment of text(left,rigth,center,justify)
	text-decoration Specifies the decoration added to text(none, overline,line-through, underline)
	text-indent 	Specifies the indentation of the first line in a text-block (uppercase,lowercase,capitalize)
	text-shadow 	Specifies the shadow effect added to text
	text-transform 	Controls the capitalization of text
	unicode-bidi 	Used together with the direction property to set or return whether the text should be overridden to support multiple languages in the same document
	vertical-align 	Sets the vertical alignment of an element
	white-space 	Specifies how white-space inside an element is handled
	word-spacing 	Increases or decreases the space between words in a text

	text-align-last Specifies how to align the last line of a text
	text-emphasis 	A shorthand for setting text-emphasis-style and text-emphasis-color in one declaration
	text-justify 	Specifies how justified text should be aligned and spaced
	text-overflow 	Specifies how overflowed content that is not displayed should be signaled to the user
	word-break 		Specifies line breaking rules for non-CJK scripts
	word-wrap 		Allows long words to be able to be broken and wrap onto the next line

*/
/*
	column-count 		Specifies the number of columns an element should be divided into
	column-fill 		Specifies how to fill columns
	column-gap 			Specifies the gap between the columns
	column-rule 		A shorthand property for setting all the column-rule-* properties
	column-rule-color 	Specifies the color of the rule between columns
	column-rule-style 	Specifies the style of the rule between columns
	column-rule-width 	Specifies the width of the rule between columns
	column-span 		Specifies how many columns an element should span across
	column-width 		Specifies a suggested, optimal width for the columns
	columns 			A shorthand property for setting column-width and column-count
*/
/*
	font 			Sets all the font properties in one declaration
	font-family 	Specifies the font family for text
	font-size 		Specifies the font size of text
	font-style 		Specifies the font style for text(normal,italic,oblique)
	font-variant 	Specifies whether or not a text should be displayed in a small-caps font
	font-weight 	Specifies the weight of a font(normal,bold,bolder,lighter,100,200,300,400(normal),500,600,700(Bold),800,900)
*/
/*
	border 	Sets all the border properties in one declaration
	border-bottom 	Sets all the bottom border properties in one declaration
	border-bottom-color 	Sets the color of the bottom border
	border-bottom-style 	Sets the style of the bottom border
	border-bottom-width 	Sets the width of the bottom border
	border-color 	Sets the color of the four borders
	border-left 	Sets all the left border properties in one declaration
	border-left-color 	Sets the color of the left border
	border-left-style 	Sets the style of the left border
	border-left-width 	Sets the width of the left border
	border-right 	Sets all the right border properties in one declaration
	border-right-color 	Sets the color of the right border
	border-right-style 	Sets the style of the right border
	border-right-width 	Sets the width of the right border
	border-style 	Sets the style of the four borders
	border-top 	Sets all the top border properties in one declaration
	border-top-color 	Sets the color of the top border
	border-top-style 	Sets the style of the top border
	border-top-width 	Sets the width of the top border
	border-width 	Sets the width of the four borders
*/
/*
	An outline is a line that is drawn around elements (outside the borders) to make the element "stand out".
	However, the outline property is different from the border property.The outline is not a part of an element's dimensions; the element's total width and height is not affected by the width of the outline.
	
	outline 		Sets all the outline properties in one declaration 	
	outline-color 	Sets the color of an outline
	outline-style 	Sets the style of an outline
	outline-width 	Sets the width of an outline
*/
	
/*	
	margin clears an area around an element (outside the border). The margin does not have a background color, and is completely transparent.

	margin 			A shorthand property for setting the margin properties in one declaration
	margin-bottom 	Sets the bottom margin of an element
	margin-left 	Sets the left margin of an element
	margin-right 	Sets the right margin of an element
	margin-top 		Sets the top margin of an element
*/

/*	
	padding properties define the space between the element border and the element content

	padding 		A shorthand property for setting all the padding properties in one declaration
	padding-bottom 	Sets the bottom padding of an element
	padding-left 	Sets the left padding of an element
	padding-right 	Sets the right padding of an element
	padding-top 	Sets the top padding of an element
*/
/*  
    display property specifies if/how an element is displayed (block,inline,inline-block(combination of float(for the current block) and clear(for the folowing block)),none)(use none to make an element invicible, effects layout)
	visibility property specifies whether or not an element is visible (hidden,visible)
*/
/*
	position Specifies the type of positioning for an element(static(default),relative,fixed,absolute)
	
	top 	 Sets the top margin edge for a positioned box
	bottom 	 Sets the bottom margin edge for a positioned box
	right 	 Sets the right margin edge for a positioned box
	left 	 Sets the left margin edge for a positioned box

	clip 	 Clips an absolutely positioned element
	cursor 	 Specifies the type of cursor to be displayed(url,auto,crosshair,default,pointer,move,e-resize,ne-resize,nw-resize,n-resize,se-resize,sw-resize,s-resize,w-resize,text,wait,help)
	overflow Specifies what happens if content overflows an element's box

	z-index  Sets the stack order of an element
*/

/*
	CSS Combinators
		
		element1 element2 (element 2 is a desendent of element 1)
		element1 > element2 (element 2 is a direct(immediate) child of element 1)
		element1 + element2 (element 2 is a adjacent sibling of element 1)
		element1 ~ element2 (element 2 is a sibling of element 1)
*/
/*	
	CSS Selectors

	CSS Pseudo Classes (element::pseudo_class)
		:root (Refers to the html tag)

		:active (when link is clicked)
		:link (when link is not visited)
		:visited (when link is visited)
				
		:enabled (when an input is enabled(default))
		:disabled (when an input is disabled)
		:optional (when field is optional)
		:required (when field is required)
		:checked (when checkbox is checked)
		:in-range (when input is in range)
		:out-of-range (when input is out of range)
		:valid (when input is valid)
		:invalid (when input is invalid)
		:read-only (when input is read only)
		:read-write (when input is read/write)

		:empty (empty element)
		
		:first-child (First child of the element)
		:last-child (last child of the element)
		:first-of-type (First element of the type)
		:last-of-type (last element of the type)
		:nth-child(n) (nth child of the element)
		:nth-last-child(n) (nth child of the element from the bottom)
		:nth-of-type(n) (nth element of the type)
		:nth-last-of-type(n) (nth element of the type from the bottom)
		:only-of-type (only of the type)
		:only-child (only child)

		:focus (when element is in focus)
		:hover (when cursor is over the element)
		
		:lang(language) (elements with a lang attribute as "language")
		:not(selector) (selects every other element not "selector")
		:target (When a particular internal bookmarked is clicked on)
		
	CSS Pseudo Elements (element::pseudo_element)
		::after (after the element)
		::before (before the element)
		::first-letter (first letter of the element)
		::first-line (first line of the element)
		::selection (on selection by the user)

	Attribute Selector (element[attibute])
		[attribute] (elements with "attribute" specified)
		[attribute=value] (elements for which "attribute=value")
		[attribute~=value] (elements which has the word "value" in the "attribute" value)
		[attribute|=value] (elements which has the word "value" at begin of the "attribute" value)
		[attribute^=value] (elements which begin with "value" at begin of the "attribute" value)
		[attribute$=value] (elements which end with "value" at begin of the "attribute" value)
		[attribute*=value] (elements which have "value" anywhere in the "attribute" value)
*/
/*
	border-radius 				A shorthand property for setting all the four border-*-*-radius properties
	border-top-left-radius 		Defines the shape of the border of the top-left corner
	border-top-right-radius 	Defines the shape of the border of the top-right corner
	border-bottom-right-radius 	Defines the shape of the border of the bottom-right corner
	border-bottom-left-radius 	Defines the shape of the border of the bottom-left corner

	border-image 		A shorthand property for setting all the border-image-* properties
	border-image-source Specifies the path to the image to be used as a border
	border-image-slice 	Specifies how to slice the border image
	border-image-width 	Specifies the widths of the border image
	border-image-outset Specifies the amount by which the border image area extends beyond the border box
	border-image-repeat Specifies whether the border image should be repeated, rounded or stretched
*/
body
{
	/*background-color:lightgreen;*/

	background-image:url("../images/bg1.jpg");
	background-repeat:no-repeat;
	background-attachment:fixed;
	background-position:center;

	/*background: #8AC007;*/
	color: brown;
	
	direction: ltr;
	unicode-bidi: bidi-override;/*yes*/
	
	text-decoration: none;
	text-transform: none;
	
	text-align: justify;
	text-indent: 0px;
	
	letter-spacing: normal;/*in px*/
	line-height: 120%; /*wrt to character height*/
	word-spacing: normal;
	
	vertical-align: baseline;

	white-space:normal;

	font-family: courier;
	font-size: 1em;	/*(px/16)=em*/
	font-style: normal;
	font-weight: normal;
	font-variant: normal;

	/*border-color: red;
	border-width: 2px;
	border-style: ridge;*/

	border: 10px solid transparent;
	border-image: url("../images/border.png") 27 round;

	outline-color: yellow;
	outline-width: 2px;
	outline-style: solid;

	margin: 5px;

	padding: 10px;

}

/*
	height 		Sets the height of an element
	min-height 	Sets the minimum height of an element
	max-height 	Sets the maximum height of an element 
	width:  	Sets the width of an element
	min-width 	Sets the minimum width of an element
	max-width 	Sets the maximum width of an element 
*/
header
{
	border-radius:50px;

	position:fixed;
	/*z-index: -1;*/

	cursor: crosshair;

	text-shadow: 2px 2px 5px white;
	background-color: black;

	height: 60px;
	width: 520px;

	text-align: center;

	/*outline: yellow solid 5px;*/
}

header h1
{
	
}


nav
{
}

section
{
}

article
{
}

aside
{
	overflow: scroll;

	height: 100px;
	width: 900px;

	outline: 2px solid red;

	/*Hide element*/
	/*display: none;*/

	/*visibility: hidden;*/
}

footer
{
}

div
{

}

div.div_gradient
{
	height: 100px;

	border-width: 2px;
	border-style: solid;
	border-color: yellow;
}

/*
	box-shadow 	Adds one or more shadows to an element
*/
/*
	linear-gradient(color,color) (linear gradient)
	repeating-linear-gradient(color,color) (repeating linear gradient)

	radial-gradient(color,color) (radial gradient)
	repeating-radial-gradient(color,color) (repeating radial gradient)
*/
/*
	transform 			Applies a 2D or 3D transformation to an element
	transform-origin 	Allows you to change the position on transformed elements
	transform-style 	Specifies how nested elements are rendered in 3D space
	perspective 	Specifies the perspective on how 3D elements are viewed
	perspective-origin 	Specifies the bottom position of 3D elements
	backface-visibility 	Defines whether or not an element should be visible when not facing the screen

	Function 				Description
	matrix(n,n,n,n,n,n) 	Defines a 2D transformation, using a matrix of six values
	translate(x,y) 			Defines a 2D translation, moving the element along the X- and the Y-axis
	translateX(n) 			Defines a 2D translation, moving the element along the X-axis
	translateY(n) 			Defines a 2D translation, moving the element along the Y-axis
	scale(x,y) 				Defines a 2D scale transformation, changing the elements width and height
	scaleX(n) 				Defines a 2D scale transformation, changing the element's width
	scaleY(n) 				Defines a 2D scale transformation, changing the element's height
	rotate(angle) 			Defines a 2D rotation, the angle is specified in the parameter
	skew(x-angle,y-angle) 	Defines a 2D skew transformation along the X- and the Y-axis
	skewX(angle) 			Defines a 2D skew transformation along the X-axis
	skewY(angle) 			Defines a 2D skew transformation along the Y-axis


	matrix3d(n,n,n,n,n,n,n,n,n,n,n,n,n,n,n,n) 	Defines a 3D transformation, using a 4x4 matrix of 16 values
	translate3d(x,y,z) 							Defines a 3D translation
	translateX(x) 								Defines a 3D translation, using only the value for the X-axis
	translateY(y)							 	Defines a 3D translation, using only the value for the Y-axis
	translateZ(z) 								Defines a 3D translation, using only the value for the Z-axis
	scale3d(x,y,z) 								Defines a 3D scale transformation
	scaleX(x) 									Defines a 3D scale transformation by giving a value for the X-axis
	scaleY(y)								 	Defines a 3D scale transformation by giving a value for the Y-axis
	scaleZ(z) 									Defines a 3D scale transformation by giving a value for the Z-axis
	rotate3d(x,y,z,angle) 						Defines a 3D rotation
	rotateX(angle) 								Defines a 3D rotation along the X-axis
	rotateY(angle) 								Defines a 3D rotation along the Y-axis
	rotateZ(angle) 								Defines a 3D rotation along the Z-axis
	perspective(n) 								Defines a perspective view for a 3D transformed element


	matrix(a,b,c,d,e,f)
		a 	Scales the drawing horizontally
		b 	Skew the the drawing horizontally
		c 	Skew the the drawing vertically
		d 	Scales the drawing vertically
		e 	Moves the the drawing horizontally
		f 	Moves the the drawing vertically

	transition 					A shorthand property for setting the four transition properties into a single property
	transition-delay 			Specifies a delay (in seconds) for the transition effect
	transition-duration 		Specifies how many seconds or milliseconds a transition effect takes to complete
	transition-property 		Specifies the name of the CSS property the transition effect is for
	transition-timing-function 	Specifies the speed curve of the transition effect		
    	ease					specifies a transition effect with a slow start, then fast, then end slowly (this is default)
    	linear 					specifies a transition effect with the same speed from start to end
	    ease-in 				specifies a transition effect with a slow start
	    ease-out 				specifies a transition effect with a slow end
	    ease-in-out 			specifies a transition effect with a slow start and end
	    cubic-bezier(n,n,n,n) 	lets you define your own values in a cubic-bezier function
*/
/*
	@keyframes 					Specifies the animation code
	animation 					A shorthand property for setting all the animation properties (except animation-play-state and animation-fill-mode)
	animation-delay 			Specifies a delay for the start of an animation
	animation-direction 		Specifies whether an animation should play in reverse direction or alternate cycles
	animation-duration 			Specifies how many seconds or milliseconds an animation takes to complete one cycle
	animation-fill-mode 		Specifies a style for the element when the animation is not playing (when it is finished, or when it has a delay)
	animation-iteration-count 	Specifies the number of times an animation should be played
	animation-name 				Specifies the name of the @keyframes animation
	animation-play-state 		Specifies whether the animation is running or paused
	animation-timing-function 	Specifies the speed curve of the animation
*/
div#div_1
{
	box-shadow:2px 3px 5px gold;

	background: linear-gradient(red, blue); 
}

div#div_1:hover
{
	transform: translate(10px,10px);
}

div#div_2
{
    background: linear-gradient(to right, red , blue);
}

div#div_2:hover
{
	transform: rotate(20deg);
}

div#div_3
{
 	background: linear-gradient(-90deg, red , blue);  
}

div#div_3:hover
{
	transform: scale(0.5,0.5);;
}

div#div_4
{
 	background: linear-gradient(red, orange, yellow, green, blue, indigo, violet);   
}

div#div_4:hover
{
	transform: skewX(20deg);
	/*transform: skewY(20deg);*/
}

div#div_5
{
  	background: linear-gradient(red 20%, orange 40%, yellow 60%, green 80%, blue 100%);  

    transition: width 2s, transform 2s;

    width: 50%;
}

div#div_5:hover
{
	width: 100%;
	transform: rotate(180deg);
}

div#div_6
{
	background: repeating-linear-gradient(red, yellow 10%, green 20%);    

	width: 100%;
	/*transition: width 2s transform:2s;*/

	transition-property: width,transform;
	transition-duration: 2s; 
    transition-timing-function: linear;
    transition-delay: 0s;

}

div#div_6:hover
{
	width: 200px;
	transform: skewX(60deg);
}

div#div_7
{
	width: 100px;
	
 	background: radial-gradient(blue,green,yellow,black);
}

@keyframes animation_1 
{
    0%   {background-color: red; width: 75px;height: 75px;transform: rotate(180deg);}
    25%  {background-color: yellow; width: 50px;height: 50px;}
    50%  {background-color: blue; width: 25px;height: 25px;}
    75%  {background-color: green; width: 50px;height: 50px;}
    100% {background-color: red; width: 75px;height: 75px;}
}

div.div_animation_container
{	
	width: 100px;
	height: 100px;
}

div#div_8
{
	width: 100px;
	height: 100px;

	animation-name: animation_1;
 	
 	animation-duration: 5s;
	animation-timing-function: linear;
	animation-iteration-count: infinite;
	animation-direction: alternate;
	animation-fill-mode: forwards;
}

h1
{
}

/*
	list-style 			Sets all the properties for a list in one declaration
	list-style-image 	Specifies an image as the list-item marker
	list-style-position Specifies if the list-item markers should appear inside or outside the content flow
	list-style-type 	Specifies the type of list-item marker
*/

ul
{
	/*Custom Bullet*/
	list-style-image: url("../images/bullet_1.jpg");
	
	list-style-position: inside;
	list-style-type: square; /*To be used if image not available*/
}

li
{
	/*Custom Bullet*/
/*	
	background-image: url("../images/bullet_1.jpg");
	background-repeat: no-repeat;
    background-position: 0px center;
    padding-left: 15px;
*/    
}

p
{

}

article p
{
	text-indent: 50px;
}

/*
	Adding custom font using "@font-face" rule
*/
@font-face 
{
    font-family: SonOfTime;
    src: url("../fonts/son_of_time/SonOfTime.ttf");
}

p#p1
{
	font-family: SonOfTime;
	font-size: 150%;
	line-height: 150%;
}

p#p2
{
	column-count: 4;
	column-span:3;
	column-width:300px;
	
	column-gap: 10px;
	column-rule-color: red;
	column-rule-style: dotted;
	column-rule-width: 2px;
}


/*
	clear 	Specifies on which sides of an element where floating elements are not allowed to float
	float 	Specifies whether or not an element should float
*/

p#p8
{
	/*clear: right;*/
}

figure
{
	float: right;
}

figcaption
{
	text-align: center;
}

img
{
	height: 200px;
	width: 200px;
}

a
{
}

/*
	Link States
		
	    a:link - a normal, unvisited link
	    a:visited - a link the user has visited 
	    a:hover - a link when the user mouses over it (a:hover MUST come after a:link and a:visited)
        a:active - a link the moment it is clicked (a:active MUST come after a:hover)
*/

a:link
{
}
				
a:visited 
{
}
				
a:hover
{
}
				
a:active  
{
}

